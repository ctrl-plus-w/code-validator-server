# import "./user.graphql"
# import "./role.graphql"
# import "./group.graphql"
# import "./answer.graphql"
# import "./evaluation.graphql"

enum Status {
  WAITING
  TODO
  DONE
}

input EvaluationsInput {
  groupIds: [Int!]
  userIds: [Int!]
  status: Status
  usernames: [String!]
}

input DeleteInput {
  id: Int!
}

type DeleteResponse {
  deleted: Boolean!
}

type Query {
  user(id: Int!): User
  users: [User!]!

  role(id: Int!): Role
  roles: [Role!]!

  group(id: Int!): Group
  groups: [Group!]!

  answer(id: Int!): Answer
  answers(evaluationId: Int): [Answer!]!

  evaluation(id: Int!): Evaluation
  evaluations(input: EvaluationsInput): [Evaluation!]!
}

type Mutation {
  login(input: LoginInput!): LoginResponse
  validateToken(input: ValidateTokenInput!): ValidateTokenResponse

  createUser(input: CreateUserInput): UserResponse
  updateUser(input: UpdateUserInput): UserResponse
  deleteUser(input: DeleteInput): DeleteResponse

  createRole(input: CreateRoleInput): RoleResponse
  updateRole(input: UpdateRoleInput): RoleResponse
  deleteRole(input: DeleteInput): DeleteResponse

  createGroup(input: CreateGroupInput): GroupResponse
  updateGroup(input: UpdateGroupInput): GroupResponse
  deleteGroup(input: DeleteInput): DeleteResponse

  answer(input: AnswerEvaluationInput): AnswerResponse
  updateAnswer(input: UpdateAnswerInput): AnswerResponse
  deleteAnswer(input: DeleteInput): DeleteResponse

  createEvaluation(input: CreateEvaluationInput): EvaluationResponse
  updateEvaluation(input: UpdateEvaluationInput): EvaluationResponse
  deleteEvaluation(input: DeleteInput): DeleteResponse
}
